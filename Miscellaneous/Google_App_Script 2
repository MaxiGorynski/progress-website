function doGet(e) {
  // Check if parameters exist
  if (!e || !e.parameter) {
    return HtmlService.createHtmlOutput("Test GET endpoint working");
  }

  // Check if this is an NDA submission
  if (e.parameter.action === 'submitNDA') {
    try {
      // Extract NDA data
      const name = e.parameter.name;
      const email = e.parameter.email;
      const company = e.parameter.company || 'Not provided';
      const date = e.parameter.date;
      const signature = e.parameter.signature || null; // May be null for GET requests

      // Open the spreadsheet
      const spreadsheet = SpreadsheetApp.openById('1BDp1gaKEGyBH4Ljj0JjNfZ6EtmM9CykFF3kdbElKlnQ');

      // Get or create queue sheet
      let queueSheet = spreadsheet.getSheetByName('NDA Queue') || spreadsheet.insertSheet('NDA Queue');
      if (queueSheet.getLastRow() === 0) {
        queueSheet.appendRow(['Timestamp', 'Name', 'Email', 'Company', 'Date', 'Has Signature']);
      }

      // Add to queue
      queueSheet.appendRow([
        new Date().toISOString(),
        name,
        email,
        company,
        date,
        signature ? 'Yes' : 'No'
      ]);

      // Store signature in Properties if present
      if (signature) {
        const scriptProperties = PropertiesService.getScriptProperties();
        scriptProperties.setProperty('signature_' + name + '_' + date, signature);
      }

      // Get success URL if provided
      const successUrl = e.parameter.successUrl || '';

      // Return success page with redirect
      if (successUrl) {
        return HtmlService.createHtmlOutput(
          '<html><body>' +
          '<h1>NDA Submitted Successfully</h1>' +
          '<p>Your NDA has been submitted. Thank you!</p>' +
          '<script>setTimeout(function() { window.location.href = "' + successUrl + '"; }, 3000);</script>' +
          '</body></html>'
        );
      } else {
        return HtmlService.createHtmlOutput(
          '<html><body><h1>Success!</h1><p>Your NDA was submitted successfully.</p></body></html>'
        );
      }
    } catch (error) {
      // Return error response
      return HtmlService.createHtmlOutput(
        '<html><body><h1>Error</h1><p>' + error.toString() + '</p></body></html>'
      );
    }
  }
}

// This function will be triggered by a time-based trigger
function processNDAQueue() {
  try {
    Logger.log("Starting to process NDA queue");

    // Open the spreadsheet
    const spreadsheet = SpreadsheetApp.openById('1BDp1gaKEGyBH4Ljj0JjNfZ6EtmM9CykFF3kdbElKlnQ');
    Logger.log("Successfully opened spreadsheet");

    // Get queue sheet
    let queueSheet = spreadsheet.getSheetByName('NDA Queue');
    if (!queueSheet) {
      Logger.log("NDA Queue sheet not found");
      return;
    }
    Logger.log("Found NDA Queue sheet");

    // Get or create submissions sheet
    let submissionsSheet = spreadsheet.getSheetByName('NDA Submissions') || spreadsheet.insertSheet('NDA Submissions');
    if (submissionsSheet.getLastRow() === 0) {
      submissionsSheet.appendRow(['Timestamp', 'Name', 'Email', 'Company', 'Date Signed', 'PDF Sent']);
      Logger.log("Created headers in NDA Submissions sheet");
    }

    // Get data from queue
    const queueData = queueSheet.getDataRange().getValues();
    Logger.log("Queue data rows: " + queueData.length);

    if (queueData.length <= 1) {
      Logger.log("No data to process in queue (only headers or empty)");
      return;
    }

    // Get script properties for signatures
    const scriptProperties = PropertiesService.getScriptProperties();

    // Process each row in the queue
    for (let i = 1; i < queueData.length; i++) {
      const row = queueData[i];
      Logger.log("Processing row " + i + ": " + JSON.stringify(row));

      // Extract data from the row
      const timestamp = row[0] || new Date().toISOString();
      const name = row[1] || "Unknown";
      const email = row[2] || "no-email@example.com";
      const company = row[3] || "Not provided";
      const date = row[4] || new Date().toISOString().split('T')[0];

      Logger.log("Extracted data - Name: " + name + ", Email: " + email);

      try {
        // Get signature from properties
        const signatureBase64 = scriptProperties.getProperty('signature_' + name + '_' + date);

        // Create PDF
        Logger.log("Creating PDF for: " + name);
        const pdfBlob = createNDAPdf(name, email, company, date, signatureBase64);
        Logger.log("PDF created successfully");

        // Send email
        Logger.log("Sending email to: maxgorynski@gmail.com");
        const subject = 'New NDA Submission: ' + name;
        const body =
            'A new NDA has been submitted with the following details:\n\n' +
            'Name: ' + name + '\n' +
            'Email: ' + email + '\n' +
            'Company: ' + company + '\n' +
            'Date: ' + date + '\n\n' +
            'The user has electronically signed the NDA.\n' +
            'The signed NDA document is attached to this email.\n\n' +
            'This is an automated message from the Progress Political Party website.';

        GmailApp.sendEmail(
          'maxgorynski@gmail.com',
          subject,
          body,
          {
            attachments: [pdfBlob],
            name: 'Progress Political Party'
          }
        );
        Logger.log("Email sent successfully");

        // Add to submissions sheet
        submissionsSheet.appendRow([timestamp, name, email, company, date, 'Yes']);
        Logger.log("Added to submissions sheet");

        // Clean up signature from properties
        scriptProperties.deleteProperty('signature_' + name + '_' + date);
      } catch (rowError) {
        Logger.log("Error processing row " + i + ": " + rowError.toString());
      }
    }

    // Clear the queue after processing
    Logger.log("Clearing queue sheet");
    queueSheet.clear();
    queueSheet.appendRow(['Timestamp', 'Name', 'Email', 'Company', 'Date', 'Has Signature']);

    Logger.log('Processed ' + (queueData.length - 1) + ' NDA submissions');
  } catch (error) {
    Logger.log('Error processing NDA queue: ' + error.toString());
    Logger.log('Stack trace: ' + error.stack);
  }
}

// Set up the time-based trigger
function setupTrigger() {
  // Delete existing triggers
  const triggers = ScriptApp.getProjectTriggers();
  for (let i = 0; i < triggers.length; i++) {
    if (triggers[i].getHandlerFunction() === 'processNDAQueue') {
      ScriptApp.deleteTrigger(triggers[i]);
    }
  }

  // Create a new trigger to run every 5 minutes
  ScriptApp.newTrigger('processNDAQueue')
      .timeBased()
      .everyMinutes(5)
      .create();

  Logger.log('Trigger set up successfully');
}

function testSheetAccess() {
  try {
    const spreadsheetId = '1BDp1gaKEGyBH4Ljj0JjNfZ6EtmM9CykFF3kdbElKlnQ'; // Your sheet ID
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    Logger.log("Successfully opened: " + spreadsheet.getName());

    // Test writing to the sheet
    let sheet = spreadsheet.getSheetByName('Test') || spreadsheet.insertSheet('Test');
    sheet.appendRow(['Test', new Date().toString()]);
    Logger.log("Successfully wrote to sheet");

    // Test email
    GmailApp.sendEmail('maxgorynski@gmail.com', 'Test Email', 'This is a test email from Apps Script');
    Logger.log("Successfully sent email");
  } catch (error) {
    Logger.log("Error: " + error.toString());
  }
}

function createNDAPdf(name, email, company, date) {
  try {
    // Create a Google Doc
    Logger.log("Creating new Google Doc");
    const doc = DocumentApp.create('NDA_' + name + '_' + date);
    const body = doc.getBody();

    // Add header
    body.appendParagraph('PROGRESS POLITICAL PARTY')
        .setHeading(DocumentApp.ParagraphHeading.HEADING1)
        .setAlignment(DocumentApp.HorizontalAlignment.CENTER);

    body.appendParagraph('NON-DISCLOSURE AGREEMENT')
        .setHeading(DocumentApp.ParagraphHeading.HEADING2)
        .setAlignment(DocumentApp.HorizontalAlignment.CENTER);

    // Add NDA text
    body.appendParagraph('\nThis confidentiality agreement (the "Agreement") is dated ' + date + '.')
        .setAlignment(DocumentApp.HorizontalAlignment.JUSTIFY);

    body.appendParagraph('\nThe Agreement is to hold between Bletchley Point Ltd., and any future entity to which the venture in question may in future be renamed (the "Company"), represented by Maxi Gorynski [General Director], and ' + name + ' (the "New Member").')
        .setAlignment(DocumentApp.HorizontalAlignment.JUSTIFY);

    body.appendParagraph('\n1. Non-Disclosure of Confidential Information')
        .setBold(true);

    body.appendParagraph('By signing this confidentiality agreement, the New Member agrees to the following:')
        .setAlignment(DocumentApp.HorizontalAlignment.JUSTIFY);

    // Add points using simple dashes instead of bullet points
    body.appendParagraph('- They shall not copy, distribute, or otherwise disseminate any material belonging to the Company â€“ inclusive of but not limited to documents, digital or material assets, logos, strategic plans, marketing materials, contact registers, software products, codebases, databases, communications logs, letters and correspondence, and financial information; they shall not do so orally, in writing, or by any other format');

    body.appendParagraph('- They shall not use or exploit any Confidential Information given to them in any way except for the Purpose;');

    body.appendParagraph('- They shall not utilise the Confidential Information to obtain any commercial or other form of strategic advantage over the Disclosing Party or to compete with it, directly or indirectly;');

    body.appendParagraph('- They shall not disclose or make available the Confidential Information to any third party, except as expressly permitted by this Agreement;');

    body.appendParagraph('- They shall not utilise the Confidential Information for any commercial reason, independently or in collaboration with any third party;');

    body.appendParagraph('- They shall not copy, reduce to writing or otherwise record the Confidential Information except as strictly necessary for the Purpose (and any such copies, reductions to writing and records shall be the property of the Disclosing Party); and');

    body.appendParagraph('- They shall apply the same security measures and degree of care to the Confidential Information as the Recipient applies to its own confidential information');

    // Add signature section
    body.appendParagraph('\n\nIN WITNESS WHEREOF, the parties hereto have executed this Non-Disclosure Agreement as of the date written below.')
        .setAlignment(DocumentApp.HorizontalAlignment.JUSTIFY);

    body.appendParagraph('\n\nRECEIVING PARTY:')
        .setBold(true);

    body.appendParagraph('\nName: ' + name);
    body.appendParagraph('Email: ' + email);
    body.appendParagraph('Company: ' + company);
    body.appendParagraph('Date: ' + date);
    body.appendParagraph('\nSignature: [Electronically Signed via Web Form]');

    body.appendParagraph('\nDISCLOSING PARTY:')
        .setBold(true);

    body.appendParagraph('\nName: Maximillian \'Maxi\' Gorynski');
    body.appendParagraph('Position: General Director');
    body.appendParagraph('Date: ' + date);
    body.appendParagraph('Signature: [On File]');

    // Save and close the document
    Logger.log("Saving and closing document");
    doc.saveAndClose();

    // Convert to PDF
    Logger.log("Getting file by ID: " + doc.getId());
    const file = DriveApp.getFileById(doc.getId());
    Logger.log("Converting to PDF");
    const pdfBlob = file.getAs('application/pdf');
    pdfBlob.setName('NDA_' + name + '_' + date + '.pdf');

    // Trash the original doc (clean up)
    Logger.log("Moving original document to trash");
    file.setTrashed(true);

    return pdfBlob;
  } catch (error) {
    Logger.log("ERROR creating PDF: " + error.toString());
    Logger.log("Stack trace: " + error.stack);
    throw error;
  }
}

function getBlobFromBase64(base64Data) {
  try {
    // Remove the prefix if present (e.g., "data:image/png;base64,")
    const split = base64Data.split(',');
    const base64 = split.length > 1 ? split[1] : split[0];

    // Decode base64 data to bytes
    const decoded = Utilities.base64Decode(base64);

    // Get mime type
    let mimeType = 'image/png'; // Default
    if (split.length > 1 && split[0].indexOf('image/') > -1) {
      mimeType = split[0].split(':')[1].split(';')[0];
    }

    // Create blob
    return Utilities.newBlob(decoded, mimeType, 'signature.png');
  } catch (error) {
    Logger.log("Error processing base64 image: " + error.toString());
    throw error;
  }
}

// Contact Form Handling Functions
function doPost(e) {
  try {
    Logger.log("doPost called with data: " + JSON.stringify(e));

    // Check if data was received
    if (!e || !e.parameter) {
      return ContentService.createTextOutput(JSON.stringify({
        'success': false,
        'message': 'No data received'
      }))
      .setMimeType(ContentService.MimeType.JSON);
    }

    // Parse the form data
    const params = e.parameter;
    Logger.log("Received params: " + JSON.stringify(params));

    // Check the action parameter
    if (params.action === 'submitNDA') {
      // Handle NDA submission directly in doPost
      try {
        // Extract NDA data
        const name = params.name;
        const email = params.email;
        const company = params.company || 'Not provided';
        const date = params.date;

        Logger.log("Processing NDA submission for: " + name);

        // Open the spreadsheet
        const spreadsheet = SpreadsheetApp.openById('1BDp1gaKEGyBH4Ljj0JjNfZ6EtmM9CykFF3kdbElKlnQ');

        // Get or create queue sheet
        let queueSheet = spreadsheet.getSheetByName('NDA Queue') || spreadsheet.insertSheet('NDA Queue');
        if (queueSheet.getLastRow() === 0) {
          queueSheet.appendRow(['Timestamp', 'Name', 'Email', 'Company', 'Date', 'Has Signature']);
        }

        // Add to queue
        queueSheet.appendRow([
          new Date().toISOString(),
          name,
          email,
          company,
          date,
          'Yes'
        ]);

        // Get success URL if provided
        const successUrl = params.successUrl || '';

        // Return success page with redirect
        if (successUrl) {
          return HtmlService.createHtmlOutput(
            '<html><body>' +
            '<h1>NDA Submitted Successfully</h1>' +
            '<p>Your NDA has been submitted. Thank you!</p>' +
            '<script>setTimeout(function() { window.location.href = "' + successUrl + '"; }, 3000);</script>' +
            '</body></html>'
          );
        } else {
          return HtmlService.createHtmlOutput(
            '<html><body><h1>Success!</h1><p>Your NDA was submitted successfully.</p></body></html>'
          );
        }
      } catch (ndaError) {
        Logger.log("Error in NDA submission: " + ndaError.toString());
        return ContentService.createTextOutput(JSON.stringify({
          'success': false,
          'message': 'Error processing NDA: ' + ndaError.toString()
        }))
        .setMimeType(ContentService.MimeType.JSON);
      }
    } else if (params.action === 'submitContact') {
      return handleSheetSubmission(params);
    } else {
      // Default sheet submission
      return handleSheetSubmission(params);
    }
  } catch (error) {
    Logger.log("Error in doPost: " + error.toString());

    // Return error response
    return ContentService.createTextOutput(JSON.stringify({
      'success': false,
      'message': 'Error: ' + error.toString()
    }))
    .setMimeType(ContentService.MimeType.JSON);
  }
}

// Add this function to your script
function handleNDASubmission(params) {
  try {
    // Extract NDA data
    const name = params.name;
    const email = params.email;
    const company = params.company || 'Not provided';
    const date = params.date;

    // Open the spreadsheet
    const spreadsheet = SpreadsheetApp.openById('1BDp1gaKEGyBH4Ljj0JjNfZ6EtmM9CykFF3kdbElKlnQ');

    // Get or create queue sheet
    let queueSheet = spreadsheet.getSheetByName('NDA Queue') || spreadsheet.insertSheet('NDA Queue');
    if (queueSheet.getLastRow() === 0) {
      queueSheet.appendRow(['Timestamp', 'Name', 'Email', 'Company', 'Date', 'Has Signature']);
    }

    // Add to queue
    queueSheet.appendRow([
      new Date().toISOString(),
      name,
      email,
      company,
      date,
      'Yes'
    ]);

    // Get success URL if provided
    const successUrl = params.successUrl || '';

    // Return success page with redirect
    if (successUrl) {
      return HtmlService.createHtmlOutput(
        '<html><body>' +
        '<h1>NDA Submitted Successfully</h1>' +
        '<p>Your NDA has been submitted. Thank you!</p>' +
        '<script>setTimeout(function() { window.location.href = "' + successUrl + '"; }, 3000);</script>' +
        '</body></html>'
      );
    } else {
      return HtmlService.createHtmlOutput(
        '<html><body><h1>Success!</h1><p>Your NDA was submitted successfully.</p></body></html>'
      );
    }
  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({
      'success': false,
      'message': 'Error: ' + error.toString()
    }))
    .setMimeType(ContentService.MimeType.JSON);
  }
}

function handleSheetSubmission(params) {
  try {
    // Open the spreadsheet
    const spreadsheet = SpreadsheetApp.openById(params.sheetId);
    let sheet = spreadsheet.getSheetByName(params.sheetName);

    // If the sheet doesn't exist, create it
    if (!sheet) {
      sheet = spreadsheet.insertSheet(params.sheetName);
      sheet.appendRow(['Timestamp', 'Full Name', 'Email', 'City', 'Occupation', 'Contribution']);
    }

    // Append the new row
    sheet.appendRow([
      params.timestamp,
      params.fullName,
      params.email,
      params.city,
      params.occupation,
      params.contribution
    ]);

    // Get success URL if provided
    const successUrl = params.successUrl || '';

    // Return HTML response with redirect
    if (successUrl) {
      return HtmlService.createHtmlOutput(
        '<html><body>' +
        '<p>Form submitted successfully! Redirecting back to the site...</p>' +
        '<script>window.onload = function() { window.top.location.href = "' + successUrl + '"; };</script>' +
        '</body></html>'
      );
    } else {
      return HtmlService.createHtmlOutput(
        '<html><body><h1>Success!</h1><p>Your form was submitted successfully.</p></body></html>'
      );
    }
  } catch (error) {
    return HtmlService.createHtmlOutput(
      '<html><body><h1>Error</h1><p>' + error.toString() + '</p></body></html>'
    );
  }
}


// For handling OPTIONS request (CORS)
function doOptions(e) {
  var lock = LockService.getScriptLock();
  lock.tryLock(30000);

  var headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Max-Age': '86400'
  };

  return ContentService.createTextOutput().setMimeType(ContentService.MimeType.JSON)
    .setHeaders(headers);
}